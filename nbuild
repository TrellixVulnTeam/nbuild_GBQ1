#!/usr/bin/env python3

import sys
import importlib
import os
import argparse


def safe_call(bm, method_name, err_callback):
    try:
        getattr(bm, method_name)()
    except AttributeError as e:
        err_callback(e)


def run_cmds(bm, cmds):
    bm.to_save["base_path"] = os.getcwd()
    step_path = os.path.join(bm.to_save["base_path"], ".step")

    if os.path.exists(step_path):
        with open(step_path, "r") as f:
            step = f.readline()[:-1]
            if step != "" and step in cmds:
                cmds = cmds[cmds.index(step):]
                print("[+] Starting at step {}".format(step))
                bm.on_resume()

    for c in cmds:
        cmd = None
        try:
            cmd = getattr(bm, c)
        except AttributeError:
            print("[+] Skipping step '{}'".format(c))
            continue

        print("[+] Executing '{}'".format(c))
        try:
            returncode = cmd()
            if isinstance(returncode, int) and returncode != 0 or \
                    isinstance(returncode, bool) and not returncode:
                print("[-] {} returned {}".format(c, returncode), file=sys.stderr)
                stop(bm, step_path, c)
                return
        except Exception as e:
            stop(bm, step_path, c, e)
            return


def stop(bm, step_path, cmd, err=None):
    if err is not None:
        print("{}: {}".format(cmd, err), file=sys.stderr)
    with open(step_path, "w") as f:
        print(cmd, file=f)
    bm.on_abort()


def main():
    parser = argparse.ArgumentParser(description='Compile packages from a Build Manifest.')
    parser.add_argument('manifests', nargs='+')
    parser.add_argument("--no-check", action="store_true")
    args = parser.parse_args()

    build_dir = "build1"

    if not os.path.exists(build_dir):
        os.makedirs(build_dir)
    os.chdir(build_dir)

    for manifest_path in args.manifests:
        cur_path = os.getcwd()

        module = importlib.import_module(manifest_path
                                         .replace(".py", "")
                                         .replace("/", "."),
                                         package=".")
        bm = module.BuildManifest()

        if not os.path.exists("{}-{}".format(bm.name, bm.version)):
            os.makedirs("{}-{}".format(bm.name, bm.version))
        os.chdir("{}-{}".format(bm.name, bm.version))
        print("[+] Building", bm.name, "in", os.getcwd())

        cmds = ["fetch", "unpack", "patch", "configure", "compile"]
        if not args.no_check:
            cmds.append("check")
        cmds.append("wrap")


        run_cmds(bm, cmds)
        os.chdir(cur_path)


if __name__ == "__main__":
    main()
